-- ~/.config/nvim/lua/plugins/vimtex.lua

return {
  {
    'lervag/vimtex',
    ft = 'tex',
    lazy = true,

    config = function()
      -- Define your home directory
      local home_dir = '/Users/jo-sebastian-salte-tinderholt'

      -- 1. Compiler Configuration
      vim.g.vimtex_compiler_method = 'latexmk'

      -- 2. Viewer Configuration
      vim.g.vimtex_view_method = 'sioyek'
      vim.g.vimtex_view_general_options = '--unique'

      -- 3. General VimTeX Options
      vim.g.vimtex_log_verbose = 1
      vim.g.vimtex_log_ignore = {}
      vim.g.vimtex_compiler_progname = 'nvr' -- Neovim remote
      vim.g.vimtex_quickfix_open_on_warning = 0

      -- 4. Root Markers for Project Detection
      vim.g.vimtex_root_markers = { 'main.tex', '.git', '.latexmkrc' }

      -- 5. Function to ensure .latexmkrc exists in project root
      local function ensure_latexmkrc()
        -- Get the project root detected by VimTeX
        local project_root = vim.b.vimtex.root
        if not project_root or project_root == '' then
          print 'VimTeX could not detect the project root.'
          return
        end

        -- Define the path to the .latexmkrc file in the project root
        local latexmkrc_path = project_root .. '/.latexmkrc'

        -- Check if the .latexmkrc file exists, and create it if it doesn't
        if vim.fn.filereadable(latexmkrc_path) == 0 then
          -- Get the project name
          local project_name = vim.fn.fnamemodify(project_root, ':t')
          -- Define the build directory path
          local build_dir = home_dir .. '/Desktop/LatexProsjekter/builds/' .. project_name

          -- Ensure the build directory exists
          if vim.fn.isdirectory(build_dir) == 0 then
            vim.fn.mkdir(build_dir, 'p')
            print('Created build directory: ' .. build_dir)
          else
            print('Build directory: ' .. build_dir)
          end

          -- Create the .latexmkrc file with the necessary content
          local latexmkrc_content = '# .latexmkrc autogenerated by vimtex.lua\n\n'
            .. "$out_dir = '"
            .. build_dir
            .. "';\n\n"
            .. '# Ensure output directory exists\n'
            .. 'unless (-d $out_dir) {\n'
            .. '  mkdir $out_dir or die "Cannot create directory $out_dir: $!";\n'
            .. '}\n\n'
            .. '# Enable shell-escape for minted package\n'
            .. "$pdflatex = 'pdflatex -shell-escape %O %S';\n"

          -- Write the content to the .latexmkrc file
          local file = io.open(latexmkrc_path, 'w')
          if file then
            file:write(latexmkrc_content)
            file:close()
            print('Created .latexmkrc at: ' .. latexmkrc_path)
          else
            print('Error: Could not create .latexmkrc at: ' .. latexmkrc_path)
          end
        else
          print('.latexmkrc already exists at: ' .. latexmkrc_path)
        end
      end
      -- 6. Keybindings for Compilation, Viewing, and Cleanup

      -- Compile the main document with <F5>
      vim.keymap.set('n', '<F5>', function()
        ensure_latexmkrc() -- Ensure .latexmkrc is present before compiling
        print 'Compiling the document...'
        vim.cmd 'VimtexCompile'
      end, { noremap = true, silent = true })

      -- Open the main PDF with <F6>
      vim.keymap.set('n', '<F6>', function()
        -- Get the project root directory
        local project_root = vim.b.vimtex.root
        if not project_root or project_root == '' then
          print 'VimTeX could not detect the project root.'
          return
        end

        -- Get the name of the current root directory (project folder name)
        local project_name = vim.fn.fnamemodify(project_root, ':t') -- Get project directory name

        -- Construct the build directory path
        local build_dir = home_dir .. '/Desktop/LatexProsjekter/builds/' .. project_name

        -- PDF path will always be 'main.pdf' inside the build directory
        local pdf_path = build_dir .. '/main.pdf'

        -- Check if the PDF file exists
        if vim.fn.filereadable(pdf_path) == 1 then
          print('Opening PDF at: ' .. pdf_path)
          -- Open PDF with Zathura asynchronously
          vim.fn.jobstart({ 'sioyek', pdf_path }, { detach = true })
        else
          print('No PDF file found at ' .. pdf_path .. '. Please compile the main document first.')
        end
      end, { noremap = true, silent = true })

      -- Clean up auxiliary files with <F8>
      vim.keymap.set('n', '<F8>', function()
        print 'Cleaning up auxiliary files...'
        vim.cmd 'VimtexClean'
      end, { noremap = true, silent = true })

      -- Force recompile with <F7>
      vim.keymap.set('n', '<F7>', function()
        ensure_latexmkrc() -- Ensure .latexmkrc is present before forcing recompilation
        print 'Forcing full recompilation...'
        vim.cmd 'VimtexClean'
        vim.cmd 'VimtexCompile'
      end, { noremap = true, silent = true })

      -- Create .latexmkrc with <F9>
      vim.keymap.set('n', '<F9>', function()
        ensure_latexmkrc()
      end, { noremap = true, silent = true })

      --- nytt
      vim.keymap.set('n', '<leader>lw', function()
        vim.cmd 'VimtexCountWords'
      end, { desc = 'Count words' })
      --- nytt
    end,
  },
}
